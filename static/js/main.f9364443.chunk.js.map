{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_this$props","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","React","createElement","id","concat","className","Component","getClosestNode","unvisitedNodes","_toConsumableArray","reduce","closestNode","node","distance","updateUnvisitedNeighbors","grid","_step","unvisitedNeighbors","neighbors","push","length","filter","neighbor","isVisited","getUnvisitedNeighbors","_iterator","_createForOfIteratorHelper","s","n","done","previousNode","err","e","f","PathfindingVisualizer","_useState","useState","_useState2","_slicedToArray","setGrid","_useState3","_useState4","mouseIsPressed","setMouseIsPressed","animateAlgorithm","visitedNodesInOrder","nodesInShortestPathOrder","_loop","i","setTimeout","shortestPathClassName","animationDelay","_loop2","document","getElementById","animateShortestPath","v","_ret","visualizeDijkstra","startNode","finishNode","Set","flat","getAllNodes","size","delete","Infinity","dijkstra","currentNode","unshift","getNodesInShortestPathOrder","useEffect","initialGrid","getInitialGrid","Fragment","onClick","map","rowIdx","nodeIdx","newGrid","getNewGridWithWallToggled","handleMouseDown","handleMouseEnter","currentRow","createNode","slice","newNode","_objectSpread","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f9364443.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = new Set(getAllNodes(grid));\n  while (unvisitedNodes.size) {\n    const closestNode = getClosestNode(unvisitedNodes);\n    unvisitedNodes.delete(closestNode);\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) break;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) break;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n  return visitedNodesInOrder;\n}\n\nfunction getClosestNode(unvisitedNodes) {\n  return [...unvisitedNodes].reduce((closestNode, node) =>\n    node.distance < closestNode.distance ? node : closestNode,\n  );\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    const distance = node.distance + 1;\n    if (distance < neighbor.distance) {\n      neighbor.distance = distance;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  return grid.flat();\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, {useState, useCallback, useMemo, useEffect} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 12;\nconst FINISH_NODE_ROW = 12;\nconst FINISH_NODE_COL = 30;\n\nexport default function PathfindingVisualizer() {\n  const [grid, setGrid] = useState([]);\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n\n  useEffect(() => {\n    const initialGrid = getInitialGrid();\n    setGrid(initialGrid);\n  }, []);\n\n  function handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n    setMouseIsPressed(true);\n  }\n\n  function handleMouseEnter(row, col) {\n    if (!mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(grid, row, col);\n    setGrid(newGrid);\n  }\n\n  function handleMouseUp() {\n    setMouseIsPressed(false);\n  }\n\n  function animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\n    const visitedNodeClassName = 'node node-visited';\n    const shortestPathClassName = 'node node-shortest-path';\n    const animationDelay = 10;\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          animateShortestPath(\n            nodesInShortestPathOrder,\n            shortestPathClassName,\n            animationDelay,\n          );\n        }, animationDelay * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          visitedNodeClassName;\n      }, animationDelay * i);\n    }\n  }\n\n  function animateShortestPath(\n    nodesInShortestPathOrder,\n    shortestPathClassName,\n    animationDelay,\n  ) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          shortestPathClassName;\n      }, animationDelay * i);\n    }\n  }\n\n  function visualizeDijkstra() {\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  return (\n    <>\n      <button className=\"main-button\" onClick={() => visualizeDijkstra()}>\n        Visualize Dijkstra's Algorithm\n      </button>\n      <div className=\"grid\">\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx}>\n              {row.map((node, nodeIdx) => {\n                const {row, col, isFinish, isStart, isWall} = node;\n                return (\n                  <Node\n                    key={nodeIdx}\n                    col={col}\n                    isFinish={isFinish}\n                    isStart={isStart}\n                    isWall={isWall}\n                    mouseIsPressed={mouseIsPressed}\n                    onMouseDown={(row, col) => handleMouseDown(row, col)}\n                    onMouseEnter={(row, col) => handleMouseEnter(row, col)}\n                    onMouseUp={() => handleMouseUp()}\n                    row={row}></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}